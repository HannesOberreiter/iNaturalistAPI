swagger: "2.0"
info:
  title: iNaturalist API
  description: |
    # https://api.inaturalist.org/v1/

    Alpha version API supporting searching and returning core data,
    as well as map tile generation, for https://www.inaturalist.org/.

    [iNaturalist](https://www.inaturalist.org/) is a global community of
    naturalists, scientists, and members of the public sharing over a million
    wildlife sightings to teach one another about the natural world while
    creating high quality citizen science data for science and conservation.
    The iNaturalist technology infrastructure and open source software is
    administered by the
    [California Academy of Sciences](https://www.calacademy.org/) as
    part of their mission to explore, explain, and sustain life on Earth.

    These API methods return data in JSON/JSONP and PNG response formats. They
    are meant to supplement the existing [iNaturalist
    API](https://www.inaturalist.org/pages/api+reference), implemented in Ruby
    on Rails, which has more functionality and supports more write operations,
    but tends to be slower and have less consistent response formats. Visit our
    [developers page](https://www.inaturalist.org/pages/developers) for more
    information. Write operations that expect and return JSON describe a single
    `body` parameter that represents the request body, which should be specified
    as JSON. See the "Model" of each body parameter for attributes that we
    accept in these JSON objects.

    Multiple values for a single URL parameter should be separated by commas,
    e.g. `taxon_id=1,2,3`.

    Map tiles are generated using the
    [node-mapnik](https://github.com/mapnik/node-mapnik) library, following the
    XYZ map tiling scheme. The "Observation Tile" methods accept nearly all the
    parameters of the observation search APIs, and will generate map tiles
    reflecting the same obseravtions returned by searches. These
    "Observation Tile" methods have corresponding
    [UTFGrid](https://github.com/mapbox/utfgrid-spec) JSON
    responses which return information needed to make interactive maps.

    Authentication in the Node API is handled via JSON Web Tokens (JWT). To
    obtain one, make an [OAuth-authenticated
    request](http://www.inaturalist.org/pages/api+reference#auth) to
    https://www.inaturalist.org/users/api_token. Each JWT will expire after 24
    hours. Authentication required for all PUT and POST requests. Some GET
    requests will also include private information like hidden coordinates if
    the authenticated user has permission to view them.

    iNaturalist Website: https://www.inaturalist.org/

    Open Souce Software: https://github.com/inaturalist/
  version: "1.1.0-alpha.1"
schemes:
  - http
  - https
basePath: /v1
produces:
  - application/json
tags:
  - name: Annotations
    description: Create, delete, and vote
  - name: Comments
    description: Create, update, and delete
  - name: Controlled Terms
    description: Search and fetch
  - name: Flags
    description: Create and delete flags
  - name: Identifications
    description: Create, update, and delete
  - name: Observation Field Values
    description: Create, update, and delete
  - name: Observations
    description: Search and fetch
  - name: Places
    description: Search and fetch
  - name: Posts
    description: Fetch site and project posts
  - name: Project Observations
    description: Create, update, and delete
  - name: Projects
    description: Search and fetch projects and members
  - name: Taxa
    description: Search and fetch
  - name: Users
    description: Fetch and update
  - name: Observation Tiles
    description: Map observation search results
  - name: Polygon Tiles
    description: Place geometry and taxon range tiles
  - name: UTFGrid
    description: JSON for observation tiles
paths:
  /annotations:
    post:
      summary: Annotation Create
      description: |
        Create an annotation
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Annotation object
          schema:
            $ref: "#/definitions/PostAnnotation"
      tags:
        - Annotations
      security:
        - api_token: [ ]
  /annotations/{id}:
    delete:
      summary: Annotation Delete
      description: |
        Delete an annotation
      parameters:
        - $ref: "#/parameters/annotation_path_id"
          description: ID of the annotation
      tags:
        - Annotations
      security:
        - api_token: [ ]
  /votes/vote/annotation/{id}:
    post:
      summary: Annotation Vote
      description: |
        Vote on an annotation
      parameters:
        - $ref: "#/parameters/annotation_path_id"
        - name: body
          in: body
          description: Vote object
          schema:
            $ref: "#/definitions/PostVote"
      tags:
        - Annotations
      security:
        - api_token: [ ]
  /votes/unvote/annotation/{id}:
    delete:
      summary: Annotation Unvote
      description: |
        Remove a vote from annotation
      parameters:
        - $ref: "#/parameters/annotation_path_id"
      tags:
        - Annotations
      security:
        - api_token: [ ]
  /comments:
    post:
      summary: Comment Create
      description: |
        Create a comment
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostComment"
      tags:
        - Comments
      security:
        - api_token: [ ]
  /comments/{id}:
    put:
      summary: Comment Update
      description: |
        Update a comment
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostComment"
      tags:
        - Comments
      security:
        - api_token: [ ]
    delete:
      summary: Comment Delete
      description: |
        Delete a comment
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Comments
      security:
        - api_token: [ ]
  /controlled_terms:
    get:
      summary: Terms Index
      description: |
        List all attribute controlled terms
      tags:
        - Controlled Terms
  /controlled_terms/for_taxon:
    get:
      summary: Terms for Taxon
      description: |
        Returns attribute controlled terms relevant to a taxon
      parameters:
        - name: taxon_id
          type: integer
          in: query
          minimum: 1
          description: Filter by this taxon
          required: true
      tags:
        - Controlled Terms
  /flags:
    post:
      summary: Flag Create
      description: |
        Create a flag. To create a custom flag beyond the standard `spam` and
        `inappropriate` flags, set `flag` to `other` and include a `flag_explanation`
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Flag object
          schema:
            $ref: "#/definitions/PostFlag"
      tags:
        - Flags
      security:
        - api_token: [ ]
  /flags/{id}:
    delete:
      summary: Flag Delete
      description: |
        Delete a flag
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Flags
      security:
        - api_token: [ ]
  /identifications/{id}:
    get:
      summary: Identification Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding identifications
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Identifications
    put:
      summary: Identification Update
      description: |
        Update an identification. Note that to "withdraw" an observation you
        send a `PUT` request to this endpoint and set the `current`
        attribute to false. To "restore" it you do the same but set
        `current` to `true`. Only one identification by a given user can be
        `current` for a given observation, so if you "restore" one all the other
        identifications by the authenticated user for the given observation will
        be withdrawn.
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Identification object
          schema:
            $ref: "#/definitions/PostIdentification"
      tags:
        - Identifications
      security:
        - api_token: [ ]
    delete:
      summary: Identification Delete
      description: |
        Delete an identification. See description of `PUT /identifications/{id}
        for notes on withdrawing and restoring identifications.
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Identifications
      security:
        - api_token: [ ]
  /identifications:
    post:
      summary: Identification Create
      description: Create an identification
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Identification object
          schema:
            $ref: "#/definitions/PostIdentification"
      tags:
        - Identifications
      security:
        - api_token: [ ]
    get:
      summary: Identification Search
      description: |
        Given zero to many of following parameters, returns identifications
        matching the search criteria
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Identifications
  /identifications/categories:
    get:
      summary: Identification Categories
      description: |
        Given zero to many of following parameters, return counts of the
        categories of identifications matching the search criteria
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Identifications
  /identifications/species_counts:
    get:
      summary: Identification Species Counts
      description: |
        Given zero to many of following parameters, returns `leaf taxa`
        associated with identifications matching the search criteria and the
        count of identifications they are associated with, ordered by count
        descending. `Leaf taxa` are the leaves of the taxonomic tree containing
        only the taxa associated with observations matching the search criteria.
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
        - name: taxon_of
          type: string
          in: query
          description: Source of the taxon for counting
          enum:
            - identification
            - observation
          default: identification
      tags:
        - Identifications
      responses:
        200:
          description: |
            Returns an object with metadata and an array of taxa
          schema:
            $ref: "#/definitions/SpeciesCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /identifications/identifiers:
    get:
      summary: Identification Identifiers
      description: |
        Given zero to many of following parameters, returns creators of
        identifications matching the search criteria and the count of
        matching identifications, ordered by count descending
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Identifications
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observers
          schema:
            $ref: "#/definitions/UserCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /identifications/observers:
    get:
      summary: Identification Observers
      description: |
        Given zero to many of following parameters, returns creators of
        observations of identifications matching the search criteria and
        the count of matching obseravations, ordered by count descending
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Identifications
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observers
          schema:
            $ref: "#/definitions/UserCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /identifications/recent_taxa:
    get:
      summary: Identification Recent Taxa
      description: |
        Returns an array of objects each containing an identification and a
        taxon. Returns IDs representing the earliest occurrence of taxa
        associated with identifications in the filtered set of results
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Identifications
  /identifications/similar_species:
    get:
      summary: Identification Similar Species
      description: |
        Returns species attached to IDs of observations of this taxon, or
        attached to observations identified as this species, ordered by combined
        frequency descending. This will only return species in the same iconic
        taxon, and will never return descendants of the chosen taxon
      parameters:
        <%- include( "_identification_search_params_v1.yml.ejs", { type: "similar" } ) %>
        - name: taxon_id
          type: integer
          in: query
          minimum: 1
          description: Only show observations of these taxa and their descendants
          required: true
      tags:
        - Identifications
  /observations/{id}:
    get:
      summary: Observation Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding observations
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observations
          schema:
            $ref: "#/definitions/ObservationsShowResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Observation Update
      description: |
        Update an observation
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostObservation"
      tags:
        - Observations
      security:
        - api_token: [ ]
    delete:
      summary: Observation Delete
      description: |
        Delete an observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/fave:
    post:
      summary: Observations Fave
      description: |
        Fave an observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/unfave:
    delete:
      summary: Observations Unfave
      description: |
        Unfave an observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/review:
    post:
      summary: Observations Review
      description: |
        Review an observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/unreview:
    post:
      summary: Observations Unreview
      description: |
        Unreview an observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/subscriptions:
    get:
      summary: Observation Subscriptions
      description: |
        Fetches any subscriptions the current user has to this observation
        or the observer
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/quality/{metric}:
    post:
      summary: Quality Metric Set
      description: |
        Set the value of a quality metric
      parameters:
        - $ref: "#/parameters/path_id"
        - $ref: "#/parameters/path_metric"
        - name: body
          in: body
          description: Quality object
          schema:
            $ref: "#/definitions/PostQuality"
      tags:
        - Observations
      security:
        - api_token: [ ]
    delete:
      summary: Quality Metric Delete
      description: |
        Delete a quality metric
      consumes:
       - application/x-www-form-urlencoded
      parameters:
        - $ref: "#/parameters/path_id"
        - $ref: "#/parameters/path_metric"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/taxon_summary:
    get:
      summary: Observation Taxon Summary
      description: |
        Fetches information about this observation's taxon, whithin the context
        of this observation's location
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
  /subscriptions/observation/{id}/subscribe:
    post:
      summary: Observation Subscribe
      description: |
        Toggles current user's subscription to this observation. If the logged-in
        user is not subscribed, POSTing here will subscribe them. If they are already
        subscribed, this will remove the subscription
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /votes/vote/observation/{id}:
    post:
      summary: Observation Vote
      description: |
        Vote on an observation. A vote with an empty `scope` is recorded as a
        `fave` of the observation. A vote with scope `needs_id` is recorded as a
        vote on the Quality Grade criterion "can the Community ID still be
        confirmed or improved?", and can be an up or down vote
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Vote object
          schema:
            $ref: "#/definitions/PostObservationVote"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /votes/unvote/observation/{id}:
    delete:
      summary: Observation Unvote
      description: Remove a vote from an observation
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Vote object
          schema:
            $ref: "#/definitions/PostObservationVote"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations:
    get:
      summary: Observation Search
      description: |
        Given zero to many of following parameters, returns observations
        matching the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observations
          schema:
            $ref: "#/definitions/ObservationsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Observation Create
      description: |
        Create an observation
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostObservation"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/deleted:
    get:
      summary: Observations Deleted
      description: |
        Given a starting date, return an array of IDs of the authenticated
        user's observations that have been deleted since that date. Requires
        authentication
      parameters:
        - $ref: "#/parameters/since"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/histogram:
    get:
      summary: Observation Histogram
      description: |
        Given zero to many of following parameters, returns histogram data about
        observations matching the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
        - $ref: "#/parameters/date_field"
        - $ref: "#/parameters/interval"
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of histogram data
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/identifiers:
    get:
      summary: Observation Identifiers
      description: |
        Given zero to many of following parameters, returns identifiers of
        observations matching the search criteria and the count of
        obseravations they have identified, ordered by count descending
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of identifiers
          schema:
            $ref: "#/definitions/UserCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/observers:
    get:
      summary: Observation Observers
      description: |
        Given zero to many of following parameters, returns observers of
        observations matching the search criteria and the count of
        obseravations and distinct taxa of rank `species` they have observed
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observers
          schema:
            $ref: "#/definitions/ObservationsObserversResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/popular_field_values:
    get:
      summary: Observation Popular Field Values
      description: |
        Given zero to many of following parameters, returns an array of
        relevant controlled terms values and a monthly histogram
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
  /observations/species_counts:
    get:
      summary: Observation Species Counts
      description: |
        Given zero to many of following parameters, returns `leaf taxa`
        associated with observations matching the search criteria and the count of
        obseravations they are associated with, ordered by count descending.
        `Leaf taxa` are the leaves of the taxonomic tree containing only the
        taxa associated with observations matching the search criteria.
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of taxa
          schema:
            $ref: "#/definitions/SpeciesCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/updates:
    get:
      summary: Observation User Updates
      description: |
        Given zero to many of following parameters, returns an array of objects
        representing new comments and identifications on observations the authenticated
        user has subscribed to. Requires authentication
      parameters:
        - $ref: "#/parameters/created_after"
        - $ref: "#/parameters/viewed"
        - $ref: "#/parameters/observations_by"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/per_page"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observations/{id}/viewed_updates:
    put:
      summary: Observation Field Value Update
      description: |
        Mark all updates associated with this observation as viewed by logged-in user
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observations
      security:
        - api_token: [ ]
  /observation_field_values/{id}:
    put:
      summary: Observation Field Value Update
      description: |
        Update an observation field value
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Observation field value object
          schema:
            $ref: "#/definitions/PostObservationFieldValue"
      tags:
        - Observation Field Values
      security:
        - api_token: [ ]
    delete:
      summary: Observation Field Value Delete
      description: |
        Delete an observation field value
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Observation Field Values
      security:
        - api_token: [ ]
  /observation_field_values:
    post:
      summary: Observation Field Value Create
      description: |
        Create an observation field value
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Observation field value object
          schema:
            $ref: "#/definitions/PostObservationFieldValue"
      tags:
        - Observation Field Values
      security:
        - api_token: [ ]
  /places/{id}:
    get:
      summary: Place Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding places
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/PlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/autocomplete:
    get:
      summary: Place Autocomplete
      description: |
        Given an string, returns places with names starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - name: order_by
          type: string
          in: query
          description: Sort field
          enum:
            - area
        - $ref: "#/parameters/per_page"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/PlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/nearby:
    get:
      summary: Nearby Places
      description: |
        Given an bounding box, and an optional name query, return `standard`
        iNaturalist curator approved and `community` non-curated places nearby
      parameters:
        - $ref: "#/parameters/nelat_required"
        - $ref: "#/parameters/nelng_required"
        - $ref: "#/parameters/swlat_required"
        - $ref: "#/parameters/swlng_required"
        - name: name
          in: query
          type: string
          description: Name must match this value
        - $ref: "#/parameters/per_page"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results object containing
            `standard` and `community` places
          schema:
            $ref: "#/definitions/NearbyPlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /posts/for_user:
    get:
      summary: Posts For User
      description: |
        Return journal posts from the iNaturalist site. If the user is logged-in,
        also return posts from projects the user is subscribed to
      parameters:
        - name: newer_than
          type: string
          format: date-time
          in: query
          description: returns posts newer than the post with this ID
        - name: older_than
          type: string
          format: date-time
          in: query
          description: returns posts older than the post with this ID
        - $ref: "#/parameters/page"
      tags:
        - Posts
      security:
        - api_token: [ ]
  /project_observations/{id}:
    put:
      summary: Project Observation Update
      description: Update a project observation
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/UpdateProjectObservation"
      tags:
        - Project Observations
      security:
        - api_token: [ ]
    delete:
      summary: Project Observation Delete
      description: Delete a project observation
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Project Observations
      security:
        - api_token: [ ]
  /project_observations:
    post:
      summary: Project Observation Create
      description: Add an observation to a project
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: ProjectObservation object
          schema:
            $ref: "#/definitions/PostProjectObservation"
      tags:
        - Project Observations
      security:
        - api_token: [ ]
  /projects/{id}:
    get:
      summary: Project Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding projects
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of projects
          schema:
            $ref: "#/definitions/ProjectsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /projects/{id}/join:
    post:
      summary: Projects Join
      description: |
        Join a project
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Projects
      security:
        - api_token: [ ]
  /projects/{id}/leave:
    delete:
      summary: Projects Leave
      description: |
        Leave a project
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Projects
      security:
        - api_token: [ ]
  /projects/{id}/members:
    get:
      summary: Project Members
      description: |
        Given an ID, return members of the project
      parameters:
        - $ref: "#/parameters/path_id"
        - name: role
          type: string
          in: query
          description: Membership role
          enum:
            - curator
            - manager
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/per_page"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of projects
          schema:
            $ref: "#/definitions/ProjectMembersResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /projects/{id}/add:
    post:
      summary: Project Add
      description: Add an observation to a project
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: ProjectObservation object
          schema:
            $ref: "#/definitions/PostProjectAdd"
      tags:
        - Projects
      security:
        - api_token: [ ]
  /projects/{id}/remove:
    delete:
      summary: Project Add
      description: Remove an observation from a project
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: ProjectObservation object
          schema:
            $ref: "#/definitions/PostProjectAdd"
      tags:
        - Projects
      security:
        - api_token: [ ]
  /projects/autocomplete:
    get:
      summary: Project Autocomplete
      description: |
        Given an string, returns projects with titles starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - $ref: "#/parameters/per_page"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/ProjectsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /taxa/{id}:
    get:
      summary: Taxon Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding taxa
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Taxa
      responses:
        200:
          description: |
            Returns an object with metadata and a results array of taxa
          schema:
            $ref: "#/definitions/TaxaShowResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /taxa/autocomplete:
    get:
      summary: Taxon Autocomplete
      description: |
        Given an string, returns taxa with names starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - name: is_active
          type: boolean
          in: query
          description: Taxon is `active`
        - $ref: "#/parameters/per_page"
        - $ref: "#/parameters/locale"
        - $ref: "#/parameters/preferred_place_id"
      tags:
        - Taxa
      responses:
        200:
          description: |
            Returns an object with search metadata and a results array of taxa
          schema:
            $ref: "#/definitions/TaxaAutocompleteResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /users/{id}:
    get:
      summary: User Details
      description: Given an ID, returns corresponding user
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Users
    put:
      summary: User Update
      description: |
        Update a user
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: User object
          schema:
            $ref: "#/definitions/PostUser"
      tags:
        - Users
      security:
        - api_token: [ ]
  /users/me:
    get:
      summary: Users Me
      description: Fetch the logged-in user
      tags:
        - Users
      security:
        - api_token: [ ]
  /users/update_session:
    put:
      summary: User Update Session
      description: Update the logged-in user's session
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostUserUpdateSession"
      tags:
        - Users
      security:
        - api_token: [ ]
  /colored_heatmap/{zoom}/{x}/{y}.png:
    get:
      summary: Colored Heatmap Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /colored_heatmap/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Colored Heatmap Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /heatmap/{zoom}/{x}/{y}.png:
    get:
      summary: Heatmap Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /heatmap/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Heatmap Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /points/{zoom}/{x}/{y}.png:
    get:
      summary: Points Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /points/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Points Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/{place_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Place Tiles
      description: |
        Returns a PNG map tile representing the boundary of this place,
        following the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_place_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /taxon_places/{taxon_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Taxon Place Tiles
      description: |
        Returns a PNG map tile representing the boundaries of places this taxon
        is known to occur, following the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_taxon_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /taxon_ranges/{taxon_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Taxon Range Tiles
      description: |
        Returns a PNG map tile representing the range of this taxon, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_taxon_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/tile_color"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
parameters:
  # Obs Search Boolean Params
  captive:
    name: captive
    type: boolean
    in: query
    description: Captive or cultivated observations
  endemic:
    name: endemic
    type: boolean
    in: query
    description: Observations whose taxa are endemic to their location
  geo:
    name: geo
    type: boolean
    in: query
    description: Observations that are georeferenced
  id_please:
    name: id_please
    type: boolean
    in: query
    description: Observations with the `ID, Please!` flag
  identified:
    name: identified
    type: boolean
    in: query
    description: Observations that have community identifications
  introduced:
    name: introduced
    type: boolean
    in: query
    description: |
      Observations whose taxa are introduced in their location
  mappable:
    name: mappable
    type: boolean
    in: query
    description: Observations that show on map tiles
  native:
    name: native
    type: boolean
    in: query
    description: Observations whose taxa are native to their location
  out_of_range:
    name: out_of_range
    type: boolean
    in: query
    description: Observations whose taxa are outside their known ranges
  pcid:
    name: pcid
    type: boolean
    in: query
    description: |
      Observations whose identififed by the curator of a project. If
      the `project_id` parameter is also specified, this will only consider
      observations identified by curators of the specified project(s)
  photos:
    name: photos
    type: boolean
    in: query
    description: Observations with photos
  popular:
    name: popular
    type: boolean
    in: query
    description: |
      Observations that have been favorited by at least one user
  sounds:
    name: sounds
    type: boolean
    in: query
    description: Observations with sounds
  threatened:
    name: threatened
    type: boolean
    in: query
    description: |
      Observations whose taxa are threatened in their location
  verifiable:
    name: verifiable
    type: boolean
    in: query
    description: |
      Observations with a `quality_grade` of either `needs_id` or
      `research`. Equivalent to `quality_grade=needs_id,research`
  # Obs Search Multi-Value Params
  day:
    name: day
    type: array
    items:
      type: string
    in: query
    minimum: 1
    maximum: 31
    description: Must be observed within this day of the month
  id:
    name: id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Must have this ID
  license:
    name: license
    type: array
    items:
      type: string
    in: query
    description: Observation must have this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  month:
    name: month
    type: array
    items:
      type: string
    in: query
    minimum: 1
    maximum: 12
    description: Must be observed within this month
  photo_license:
    name: photo_license
    type: array
    items:
      type: string
    in: query
    description: Must have at least one photo with this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  place_id:
    name: place_id
    type: array
    items:
      type: integer
    in: query
    description: Must be observed within the place with this ID
  project_id:
    name: project_id
    type: array
    items:
      type: string
    in: query
    description: Must be added to the project this ID or slug
  rank:
    name: rank
    type: array
    items:
      type: string
    in: query
    description: Taxon must have this rank
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  site_id:
    name: site_id
    type: array
    items:
      type: string
    in: query
    description: |
      Must be affiliated with the iNaturalist network website with this ID
  sound_license:
    name: sound_license
    type: array
    items:
      type: string
    in: query
    description: Must have at least one sound with this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  taxon_id:
    name: taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Only show observations of these taxa and their descendants
  without_taxon_id:
    name: without_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Exclude observations of these taxa and their descendants
  taxon_name:
    name: taxon_name
    type: array
    items:
      type: string
    in: query
    description: |
      Taxon must have a scientific or common name matching this string
  user_id:
    name: user_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: User must have this ID or login
  user_login:
    name: user_login
    type: array
    items:
      type: string
    in: query
    description: User must have this login
  year:
    name: year
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Must be observed within this year
  # Remaining Obs Search Params
  apply_project_rules_for:
    name: apply_project_rules_for
    type: string
    in: query
    description: Must match the rules of the project with this ID or slug
  created_d1:
    name: created_d1
    type: string
    format: date-time
    in: query
    description: Must be created at or after this time
  created_d2:
    name: created_d2
    type: string
    format: date-time
    in: query
    description: Must be created at or before this time
  created_on:
    name: created_on
    type: string
    format: date
    in: query
    description: Must be created on this date
  cs:
    name: cs
    type: string
    in: query
    description: |
      Taxon must have this conservation status code. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
  csa:
    name: csa
    type: string
    in: query
    description: |
      Taxon must have a conservation status from this authority. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
  csi:
    name: csi
    type: array
    items:
      type: string
    in: query
    description: |
      Taxon must have this IUCN conservation status. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
    enum:
      - LC
      - NT
      - VU
      - EN
      - CR
      - EW
      - EX
  d1:
    name: d1
    type: string
    format: date
    in: query
    description: Must be observed on or after this date
  d2:
    name: d2
    type: string
    format: date
    in: query
    description: Must be observed on or before this date
  geoprivacy:
    name: geoprivacy
    type: array
    items:
      type: string
    in: query
    description: Must have this geoprivacy setting
    enum:
      - obscured
      - obscured_private
      - open
      - private
  hrank:
    name: hrank
    type: string
    in: query
    description: Taxon must have this rank or lower
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  iconic_taxa:
    name: iconic_taxa
    type: array
    items:
      type: string
    in: query
    description: Taxon must by within this iconic taxon
    enum:
      - Actinopterygii
      - Animalia
      - Amphibia
      - Arachnida
      - Aves
      - Chromista
      - Fungi
      - Insecta
      - Mammalia
      - Mollusca
      - Reptilia
      - Plantae
      - Protozoa
      - unknown
  id_above:
    name: id_above
    type: string
    in: query
    description: Must have an ID above this value
  identifications:
    name: identifications
    type: string
    in: query
    description: Identifications must meet these criteria
    enum:
      - most_agree
      - most_disagree
      - some_agree
  lat:
    name: lat
    type: number
    format: double
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  list_id:
    name: list_id
    type: integer
    in: query
    description: Taxon must be in the list with this ID
  lng:
    name: lng
    type: number
    format: double
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  lrank:
    name: lrank
    type: string
    in: query
    description: Taxon must have this rank or higher
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  nelat:
    name: nelat
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  nelng:
    name: nelng
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlat:
    name: swlat
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlng:
    name: swlng
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  not_in_project:
    name: not_in_project
    type: string
    in: query
    description: Must not be in the project with this ID or slug
  not_matching_project_rules_for:
    name: not_matching_project_rules_for
    type: string
    in: query
    description: Must not match the rules of the project with this ID or slug
  unobserved_by_user_id:
    name: unobserved_by_user_id
    type: integer
    in: query
    description: Must not be of a taxon previously observed by this user
  observed_on:
    name: observed_on
    type: string
    format: date
    in: query
    description: Must be observed on this date
  order:
    name: order
    type: string
    in: query
    description: Sort order
    default: desc
    enum:
      - desc
      - asc
  order_by:
    name: order_by
    type: string
    in: query
    description: Sort field
    default: created_at
    enum:
      - observed_on
      - species_guess
      - votes
      - id
      - created_at
  page:
    name: page
    type: string
    in: query
    description: Pagination `page` number
  per_page:
    name: per_page
    type: string
    in: query
    description: Number of results to return in a `page`
  q:
    name: q
    type: string
    in: query
    description: Search obseration properties. Can be combined with `search_on`
  quality_grade:
    name: quality_grade
    type: string
    in: query
    description: Must have this quality grade
    enum:
      - casual
      - needs_id
      - research
  radius:
    name: radius
    type: string
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  search_on:
    name: search_on
    type: string
    in: query
    description: |
      Properties to search on, when combined with `q`.
      Seaches across all properties by default
    enum:
      - names
      - tags
      - description
      - place
  ttl:
    name: ttl
    type: string
    in: query
    description: |
      Set the `Cache-Control` HTTP header with this value as `max-age`, in
      seconds. This means subsequent identical requests will be cached on
      iNaturalist servers, and commonly within web browsers
  updated_since:
    name: updated_since
    type: string
    in: query
    description: Must be updated since this time
  viewer_id:
    name: viewer_id
    type: string
    in: query
    description: See `reviewed`
  reviewed:
    name: reviewed
    type: boolean
    in: query
    description: |
      Observations have been reviewed by the user with ID equal to
      the value of the `viewer_id` parameter
  annotation_path_id:
    name: id
    in: path
    required: true
    type: string
    description: ID or UUID of the annotation
  path_id:
    name: id
    in: path
    required: true
    type: integer
    description: ID of the record
  path_multi_id:
    name: id
    in: path
    required: true
    type: array
    items:
      type: integer
    description: Must have this ID
  autocomplete_q:
    name: q
    type: string
    in: query
    required: true
    description: Name must begin with this value
  # Nearby Places
  nelat_required:
    name: nelat
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  nelng_required:
    name: nelng
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlat_required:
    name: swlat
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlng_required:
    name: swlng
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  # Locale Params
  locale:
    name: locale
    type: string
    in: query
    description: |
      Locale preference for taxon common names
  preferred_place_id:
    name: preferred_place_id
    type: integer
    in: query
    description: |
      Place preference for regional taxon common names
  # Tile Params
  zoom:
    name: zoom
    type: integer
    in: path
    required: true
    minimum: 0
    maximum: 21
    description: Zoom level. Z coordinate in the XYZ tiling scheme
  x:
    name: x
    type: integer
    in: path
    required: true
    minimum: 0
    description: X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
  y:
    name: y
    type: integer
    in: path
    required: true
    minimum: 0
    description: Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
  path_place_id:
    name: place_id
    type: integer
    in: path
    required: true
    description: Place ID
  path_taxon_id:
    name: taxon_id
    type: integer
    in: path
    required: true
    description: Taxon ID
  tile_color:
    name: color
    type: string
    in: query
    description: |
      Primary color to use in tile creation. Accepts common colors by string
      (e.g. `color=blue`), and accepts escaped color HEX codes
      (e.g. `color=%2386a91c`)
  path_metric:
    name: metric
    in: path
    required: true
    type: string
    description: Data quality category
    enum:
      - date
      - location
      - wild
  date_field:
    name: date_field
    in: query
    required: false
    type: string
    description: |
      Histogram basis: when the observation was created or observed
    default: observed
    enum:
      - created
      - observed
  interval:
    name: interval
    in: query
    required: false
    type: string
    description: |
      Time interval for histogram, with groups starting on or contained within
      the group value. The year, month, week, day, and hour options will set
      default values for `d1` or `created_d1` depending on the value of
      `date_field`, to limit the number of groups returned. You can override 
      those values if you want data from a longer or shorter time span. The
      `hour` interval only works with `date_field=created`, and this you
      should filter dates with `created_d[1,2]`
    default: month_of_year
    enum:
      - year
      - month
      - week
      - day
      - hour
      - month_of_year
      - week_of_year
  created_after:
    name: created_after
    type: string
    format: date-time
    in: query
    description: Must be created at or after this time
  viewed:
    name: viewed
    type: boolean
    in: query
    description: Notification has been viewed by the user before
  observations_by:
    name: observations_by
    type: string
    in: query
    description: |
      Only show updates on observations owned by the currently authenticated
      user or on observations the authenticated user is following but does not
      own.
    enum:
      - owner
      - following
  since:
    name: since
    type: string
    format: date-time
    in: query
    required: true
    description: Deleted at or after this time
  # identifications
  ids_current_taxon:
    name: current_taxon
    type: boolean
    in: query
    description: ID's taxon is the same it's observation's taxon
  ids_own_observation:
    name: own_observation
    type: boolean
    in: query
    description: ID was added by the observer
  ids_is_change:
    name: is_change
    type: boolean
    in: query
    description: ID was created as a results of a taxon change
  ids_taxon_active:
    name: taxon_active
    type: boolean
    in: query
    description: ID's taxon is currently an active taxon
  ids_observation_taxon_active:
    name: observation_taxon_active
    type: boolean
    in: query
    description: Observation's taxon is currently an active taxon
  ids_id:
    name: id
    type: array
    items:
      type: integer
    in: query
    description: Identification ID
  ids_rank:
    name: rank
    type: array
    items:
      type: string
    in: query
    description: ID's taxon must have this rank
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_observation_rank:
    name: rank
    type: array
    items:
      type: string
    in: query
    description: Observation's taxon must have this rank
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_user_id:
    name: user_id
    type: array
    items:
      type: integer
    in: query
    minimum: 1
    description: Identifier must have this user ID
  ids_user_login:
    name: user_id
    type: array
    items:
      type: string
    in: query
    description: Identifier must have this login
  ids_current:
    name: current
    type: boolean
    in: query
    description: Most recent ID on a observation by a user
    enum:
      - true
      - false
      - any
    default: true
  ids_category:
    name: category
    type: array
    items:
      type: string
    in: query
    enum:
      - improving
      - supporting
      - leading
      - maverick
    description: Type of identification
  ids_place_id:
    name: user_id
    type: array
    items:
      type: string
    in: query
    description: Observation must occur in this place
  ids_quality_grade:
    name: quality_grade
    type: array
    items:
      type: string
    in: query
    description: Observation must have this quality grade
    enum:
      - casual
      - needs_id
      - research
  ids_taxon_id:
    name: taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: ID taxa must match the given taxa or their descendants
  ids_observation_taxon_id:
    name: observation_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Observation taxa must match the given taxa or their descendants
  ids_iconic_taxon_id:
    name: iconic_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: ID iconic taxon ID
  ids_observation_iconic_taxon_id:
    name: observation_iconic_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Observation iconic taxon ID
  ids_lrank:
    name: lrank
    type: string
    in: query
    description: ID taxon must have this rank or higher
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_hrank:
    name: hrank
    type: string
    in: query
    description: ID taxon must have this rank or lower
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_observation_lrank:
    name: observation_lrank
    type: string
    in: query
    description: Observation taxon must have this rank or higher
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_observation_hrank:
    name: observation_hrank
    type: string
    in: query
    description: Observation taxon must have this rank or lower
    enum:
      <%- include( "_ranks.yml.ejs" ) %>
  ids_without_taxon_id:
    name: without_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Exclude IDs of these taxa and their descendants
  ids_without_observation_taxon_id:
    name: without_taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Exclude IDs of observations of these taxa and their descendants
  ids_d1:
    name: d1
    type: string
    format: date
    in: query
    description: ID created on or after this date
  ids_d2:
    name: d2
    type: string
    format: date
    in: query
    description: ID created on or before this date
  ids_observation_created_d1:
    name: observation_created_d1
    type: string
    format: date
    in: query
    description: Observation created on or after this date
  ids_observation_created_d2:
    name: observation_created_d2
    type: string
    format: date
    in: query
    description: Observation created on or before this date
  ids_observed_d1:
    name: observed_d1
    type: string
    format: date
    in: query
    description: Observation observed on or after this date
  ids_observed_d2:
    name: observed_d2
    type: string
    format: date
    in: query
    description: Observation observed on or before this date
  ids_order_by:
    name: order_by
    type: string
    in: query
    description: Sort field
    default: created_at
    enum:
      - created_at
      - id

securityDefinitions:
  api_token:
    type: apiKey
    name: Authorization
    in: header
definitions:
  AutocompleteTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          default_photo:
            $ref: "#/definitions/TaxonPhoto"
          matched_term:
            type: string
          observations_count:
            type: integer
  BaseResponse:
    type: object
    properties:
      total_results:
        type: integer
      page:
        type: integer
      per_page:
        type: integer
  Color:
    type: object
    properties:
      id:
        type: integer
      value:
        type: string
  Comment:
    type: object
    properties:
      id:
        type: integer
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      user:
        $ref: "#/definitions/User"
  PostAnnotation:
    type: object
    properties:
      annotation:
        type: object
        properties:
          resource_type:
            type: string
            enum:
              - Observation
          resource_id:
            type: integer
          controlled_attribute_id:
            type: integer
          controlled_value_id:
            type: integer
  PostComment:
    type: object
    properties:
      comment:
        type: object
        properties:
          parent_type:
            type: string
            enum:
              - Observation
              - ListedTaxon
              - AssessmentSection
              - ObservationField
              - Post
              - TaxonChange
          parent_id:
            type: integer
          body:
            type: string
  PostFlag:
    type: object
    properties:
      flag:
        type: object
        properties:
          flaggable_type:
            type: string
            enum:
              - Comment
              - Identification
              - Observation
          flaggable_id:
            type: integer
          flag:
            enum:
              - spam
              - inappropriate
              - other
      flag_explanation:
        type: string
  PostIdentification:
    type: object
    properties:
      identification:
        type: object
        properties:
          observation_id:
            type: integer
          taxon_id:
            type: integer
          current:
            type: boolean
          body:
            type: string
  PostObservation:
    type: object
    properties:
      observation:
        type: object
        properties:
          species_guess:
            type: string
          taxon_id:
            type: integer
          description:
            type: string
  PostObservationFieldValue:
    type: object
    properties:
      observation_field_value:
        type: object
        properties:
          observation_id:
            type: integer
          observation_field_id:
            type: integer
          value:
            type: string
  PostObservationPhoto:
    type: object
    properties:
      observation_photo:
        type: object
        properties:
          observation_id:
            type: integer
      file:
        type: file
  PostObservationVote:
    type: object
    properties:
      vote:
        type: string
        enum:
          - up
          - down
      scope:
        enum:
          - needs_id
  PostProjectAdd:
    type: object
    properties:
      observation_id:
        type: integer
  PostProjectObservation:
    type: object
    properties:
      project_id:
        type: integer
      observation_id:
        type: integer
  UpdateProjectObservation:
    type: object
    properties:
      project_observation:
        type: object
        properties:
          project_id:
            type: integer
          observation_id:
            type: integer
          prefers_curator_coordinate_access:
            type: boolean
  PostQuality:
    type: object
    properties:
      agree:
        type: boolean
  PostVote:
    type: object
    properties:
      vote:
        type: string
        enum:
          - up
          - down
  PostUser:
    type: object
    properties:
      user:
        type: object
        properties:
          login:
            type: string
          email:
            type: string
          name:
            type: string
            description: Display name for this user
          locale:
            type: string
            description: |
              Locale code for language/region localization. See
              https://github.com/inaturalist/inaturalist/tree/master/config/locales
              for available locales. Valid strings can be derived from file
              names, e.g. `es-MX` from `es-MX.yml`.
          time_zone:
            type: string
            description: |
              Default time zone for the user's observations. See
              http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
              for a list of values.
          place_id:
            type: integer
            description: |
              ID of the place for this user, customizes some common names and
              default search parameters
          description:
            type: string
            description: User profile description
          icon:
            type: file
            description: |
              User's profile pic. Requires POST/PUT as a multiopartrequest.
      icon_delete:
        type: boolean
        default: false
        description: Set to true to remove the current user icon.
  PostUserUpdateSession:
    type: object
    properties:
      preferred_taxon_page_ancestors_shown:
        type: boolean
      preferred_taxon_page_place_id:
        type: integer
      preferred_taxon_page_tab:
        type: string
      prefers_skip_coarer_id_modal:
        type: boolean
      prefers_hide_obs_show_annotations:
        type: boolean
      prefers_hide_obs_show_projects:
        type: boolean
      prefers_hide_obs_show_tags:
        type: boolean
      prefers_hide_obs_show_observation_fields:
        type: boolean
      prefers_hide_obs_show_identifiers:
        type: boolean
      prefers_hide_obs_show_copyright:
        type: boolean
      prefers_hide_obs_show_quality_metrics:
        type: boolean
  ConservationStatus:
    type: object
    properties:
      place_id:
        type: integer
      place:
        $ref: "#/definitions/CorePlace"
      status:
        type: string
  CorePlace:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      display_name:
        type: string
  CoreTaxon:
    type: object
    properties:
      id:
        type: integer
      iconic_taxon_id:
        type: integer
      iconic_taxon_name:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      preferred_common_name:
        type: string
      rank:
        type: string
      rank_level:
        type: integer
  DateDetails:
    type: object
    properties:
      date:
        type: string
        format: date
      day:
        type: integer
      hour:
        type: integer
      month:
        type: integer
      week:
        type: integer
      year:
        type: integer
  EstablishmentMeans:
    type: object
    properties:
      establishment_means:
        type: string
      place:
        $ref: "#/definitions/CorePlace"
  Fave:
    type: object
    properties:
      id:
        type: integer
      votable_id:
        type: integer
      created_at: 
        type: string
        format: date-time
      user: 
        $ref: "#/definitions/User"
  FieldValue:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  Identification:
    type: object
    properties:
      id:
        type: integer
      observation_id:
        type: integer
      body:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      current:
        type: boolean
      taxon:
        $ref: "#/definitions/ObservationTaxon"
  NonOwnerIdentification:
    type: object
    properties:
      id:
        type: integer
      body:
        type: string
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      user:
        $ref: "#/definitions/User"
  Observation:
    type: object
    properties:
      id:
        type: integer
      cached_votes_total:
        type: integer
      captive:
        type: boolean
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"
      comments_count:
        type: integer
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      created_time_zone:
        type: string
      description:
        type: string
      faves_count:
        type: integer
      geojson:
        $ref: "#/definitions/PointGeoJson"
      geoprivacy:
        type: string
      id_please:
        type: boolean
      identifications_count:
        type: integer
      identifications_most_agree:
        type: integer
      identifications_most_disagree:
        type: integer
      identifications_some_agree:
        type: integer
      license_code:
        type: string
      location:
        type: string
        description: in the format "lat,lng"
      mappable:
        type: boolean
      non_owner_ids:
        type: array
        items:
          $ref: "#/definitions/NonOwnerIdentification"
      num_identification_agreements:
        type: integer
      num_identification_disagreements:
        type: integer
      obscured:
        type: boolean
      observed_on:
        type: string
        format: date-time
      observed_on_details:
        $ref: "#/definitions/DateDetails"
      observed_on_string:
        type: string
      observed_time_zone:
        type: string
      ofvs:
        type: array
        items:
          $ref: "#/definitions/FieldValue"
      out_of_range:
        type: boolean
      photos:
        type: array
        items:
          $ref: "#/definitions/Photo"
      place_guess:
        type: integer
      place_ids:
        type: array
        items:
          type: integer
      project_ids:
        type: array
        items:
          type: integer
      project_ids_with_curator_id:
        type: array
        items:
          type: integer
      project_ids_without_curator_id:
        type: array
        items:
          type: integer
      quality_grade:
        type: integer
      reviewed_by:
        type: array
        items:
          type: integer
      site_id:
        type: integer
      sounds:
        type: array
        items:
          $ref: "#/definitions/Sound"
      species_guess:
        type: string
      tags:
        type: array
        items:
          type: string
      taxon:
        $ref: "#/definitions/ObservationTaxon"
      time_observed_at:
        type: string
        format: date-time
      time_zone_offset:
        type: string
      updated_at:
        type: string
        format: date-time
      uri:
        type: string
      user:
        $ref: "#/definitions/User"
      verifiable:
        type: boolean
  ObservationTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          ancestor_ids:
            type: array
            items:
              type: integer
          ancestry:
            type: string
          conservation_status:
            $ref: "#/definitions/RawConservationStatus"
          endemic:
            type: boolean
          establishment_means:
            $ref: "#/definitions/EstablishmentMeans"
          introduced:
            type: string
          native:
           type: string
          threatened:
            type: string
  Photo:
    type: object
    properties:
      id:
        type: integer
      attribution:
        type: string
      license_code:
        type: string
      url:
        type: string
  PointGeoJson:
    type: object
    properties:
      type:
        type: string
      coordinates:
        type: array
        description: an array of [long, lat]
        items:
          type: string
  PolygonGeoJson:
    type: object
    properties:
      type:
        type: string
      coordinates:
        type: array
        items:
          type: array
          items:
            type: array
            description: an array of [long, lat]
            items:
              type: number
              format: double
  Project:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      slug:
        type: string
  ProjectMember:
    type: object
    properties:
      id:
        type: integer
      project_id:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      role:
        type: string
        enum:
          - curator
          - manager
      observations_count:
        type: integer
      taxa_count:
        type: integer
      user:
        $ref: "#/definitions/User"
  RawConservationStatus:
    type: object
    properties:
      place_id:
        type: integer
        description: ID of the place to which the status applies
      source_id:
        type: integer
      authority:
        type: string
        description: |
          Organization that declared this status
      status:
        type: string
        description: |
          Body of the status, often coded, particularly when the status comes
          from the IUCN or NatureServe. Consult the authority and/or the
          status URL for details about the meanings of codes.
      iucn:
        type: integer
        description: |
          Coded value representing the equivalent IUCN status. Mappings:
          NOT_EVALUATED = 0, DATA_DEFICIENT = 5, LEAST_CONCERN = 10,
          NEAR_THREATENED = 20, VULNERABLE = 30, ENDANGERED = 40,
          CRITICALLY_ENDANGERED = 50, EXTINCT_IN_THE_WILD = 60, EXTINCT = 70
      geoprivacy:
        type: string
        description: |
          Default geoprivacy for observations of this taxon in the status's place
  TaxonConservationStatus:
    allOf:
      - $ref: "#/definitions/RawConservationStatus"
      - type: object
        properties:
          place:
            $ref: "#/definitions/CorePlace"
  ShowObservation:
    allOf:
      - $ref: "#/definitions/Observation"
      - type: object
        properties:
          identifications:
            $ref: "#/definitions/Identification"
          faves:
            $ref: "#/definitions/Fave"
  ShowPlace:
    allOf:
      - $ref: "#/definitions/CorePlace"
      - type: object
        properties:
          admin_level:
            type: integer
          ancestor_place_ids:
            type: array
            items:
              type: integer
          bbox_area:
            type: number
            format: double
          geometry_geojson:
            $ref: "#/definitions/PolygonGeoJson"
          location:
            type: string
            description: in the format "lat,lng"
          name:
            type: string
          place_type:
            type: integer
  ShowTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          colors:
            type: array
            items:
              $ref: "#/definitions/Color"
          conservation_status:
            $ref: "#/definitions/ConservationStatus"
          conservation_statuses:
            type: array
            items:
                $ref: "#/definitions/TaxonConservationStatus"
          default_photo:
            $ref: "#/definitions/TaxonPhoto"
          establishment_means:
            $ref: "#/definitions/EstablishmentMeans"
          observations_count:
            type: integer
          preferred_establishment_means:
            type: string
  Sound:
    type: object
    properties:
      id:
        type: integer
      attribution:
        type: string
      license_code:
        type: string
  TaxonPhoto:
    allOf:
      - $ref: "#/definitions/Photo"
      - type: object
        properties:
          medium_url:
            type: string
          square_url:
            type: string
  User:
    type: object
    properties:
      id:
        type: integer
      icon_content_type:
        type: string
      icon_file_name:
        type: string
      icon_url:
        type: string
      login:
        type: string
      name:
        type: string
  # Responses
  NearbyPlacesResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: object
            properties:
              standard:
                type: array
                items:
                  $ref: "#/definitions/ShowPlace"
              community:
                type: array
                items:
                  $ref: "#/definitions/ShowPlace"
  ObservationsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/Observation"
  ObservationsShowResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowObservation"
  UserCountsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                count:
                  type: integer
                user:
                  $ref: "#/definitions/User"
  ObservationsObserversResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                observation_count:
                  type: integer
                species_count:
                  type: integer
                user:
                  $ref: "#/definitions/User"
  SpeciesCountsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                count:
                  type: integer
                taxon:
                  $ref: "#/definitions/ShowTaxon"
  PlacesResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowPlace"
  ProjectMembersResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ProjectMember"
  ProjectsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/Project"
  TaxaAutocompleteResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/AutocompleteTaxon"
  TaxaShowResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowTaxon"
  UTFGridResponse:
    properties:
      grid:
        type: array
        items:
          type: string
      keys:
        type: array
        items:
          type: string
      data:
        type: object
  IdentificationsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/Identification"
  # Error
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
